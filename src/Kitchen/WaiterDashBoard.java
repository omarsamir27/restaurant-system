/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Kitchen;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author ahmed
 */
public class WaiterDashBoard extends JFrame {
        Waiter waiter;
        restaurantAgent DATA;
        HashMap<JButton,Table> tableButtonMap;
        ArrayList<JButton> buttonList ;
        DefaultListModel<String> orderListModel=new DefaultListModel();
        Orders orders = new Orders();
        ArrayList<Order> orderlist;
        ArrayList<Table> tablelist;
        Table table;
        Tables tables = new Tables();
        
 

    public WaiterDashBoard(Waiter waiter,restaurantAgent DATA) {       
        this.tableButtonMap=new HashMap<>();
        this.buttonList= new ArrayList<>();
        this.DATA=DATA;
        try {
            this.tablelist= new ArrayList<>();
            this.tablelist=DATA.getTables().getTables();          
            this.orderlist= new ArrayList<>();            
            this.orderlist=DATA.getOrders().getOrders();           
        } catch (Exception e) {
            tablelist= new ArrayList<>();
            this.orderlist= new ArrayList<>();           
        }  
        
        this.waiter=waiter;       
        initComponents();
        buttonList.add(B1);
        buttonList.add(B2);
        buttonList.add(B3);
        buttonList.add(B4);
        buttonList.add(B5);
        buttonList.add(B6);
        buttonList.add(B7);
        orderList.setModel(orderListModel);
       
        for(int i =0;i< 7;i++ ){
            tableButtonMap.put(buttonList.get(i), DATA.getTables().getTables().get(i));
        }

        tableButtonMap.entrySet().forEach((entry) -> {
            String tableNum=String.valueOf(entry.getValue().getTableNum());
            String tableOrder;
            try{
                tableOrder=entry.getValue().getOrder().getCustomerName();
            }catch (Exception ex) {
                tableOrder="Unreserved";
            }
            entry.getKey().setText("<html><center>"+"Table "+tableNum+"<br>"+tableOrder+"</html");
            });
          
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        tableDetails = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderList = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        tableNumLabel = new javax.swing.JLabel();
        reservedToLabel = new javax.swing.JLabel();
        serve = new JButton();
        ok = new JButton();
        jPanel1 = new javax.swing.JPanel();
        B6 = new JButton();
        B3 = new JButton();
        B4 = new JButton();
        B1 = new JButton();
        B2 = new JButton();
        waiterName = new javax.swing.JLabel();
        B5 = new JButton();
        B7 = new JButton();
        Back = new JButton();

        tableDetails.setLocation(new java.awt.Point(460, 50));
        tableDetails.setMaximumSize(new java.awt.Dimension(464, 750));
        tableDetails.setMinimumSize(new java.awt.Dimension(464, 750));
        tableDetails.setPreferredSize(new java.awt.Dimension(464, 750));
        tableDetails.setResizable(false);
        tableDetails.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                tableDetailsWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                tableDetailsWindowClosing(evt);
            }
        });
        tableDetails.getContentPane().setLayout(null);

        jPanel2.setBackground(new java.awt.Color(102, 0, 51));
        jPanel2.setMaximumSize(new java.awt.Dimension(464, 750));
        jPanel2.setMinimumSize(new java.awt.Dimension(464, 750));
        jPanel2.setPreferredSize(new java.awt.Dimension(464, 750));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Table Number  :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Reserved to  :");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Table Details");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        orderList.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        orderList.setForeground(new java.awt.Color(102, 0, 51));
        orderList.setModel(orderListModel);
        jScrollPane1.setViewportView(orderList);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Order Details");

        tableNumLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        tableNumLabel.setForeground(new java.awt.Color(255, 255, 255));
        tableNumLabel.setText("jLabel6");

        reservedToLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        reservedToLabel.setForeground(new java.awt.Color(255, 255, 255));
        reservedToLabel.setText("jLabel6");

        serve.setBackground(new java.awt.Color(255, 255, 255));
        serve.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        serve.setForeground(new java.awt.Color(102, 0, 51));
        serve.setText("Serve");
        serve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serveActionPerformed(evt);
            }
        });

        ok.setBackground(new java.awt.Color(255, 255, 255));
        ok.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ok.setForeground(new java.awt.Color(102, 0, 51));
        ok.setText("OK");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(serve)
                                .addGap(98, 98, 98)
                                .addComponent(ok)
                                .addGap(10, 46, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(52, 52, 52)
                                        .addComponent(tableNumLabel))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(reservedToLabel)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(92, 92, 92))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(125, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(155, 155, 155))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tableNumLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reservedToLabel))
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ok)
                    .addComponent(serve))
                .addContainerGap(202, Short.MAX_VALUE))
        );

        tableDetails.getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 0, 464, 700);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(675, 530));
        setMinimumSize(new java.awt.Dimension(675, 530));
        setPreferredSize(new java.awt.Dimension(675, 530));
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jPanel1.setBackground(new java.awt.Color(102, 0, 51));
        jPanel1.setMaximumSize(new java.awt.Dimension(675, 530));
        jPanel1.setMinimumSize(new java.awt.Dimension(675, 530));
        jPanel1.setName(""); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(675, 530));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        B6.setBackground(new java.awt.Color(255, 255, 255));
        B6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        B6.setForeground(new java.awt.Color(102, 0, 51));
        B6.setText("JButton1");
        B6.setMaximumSize(new java.awt.Dimension(145, 132));
        B6.setMinimumSize(new java.awt.Dimension(145, 132));
        B6.setPreferredSize(new java.awt.Dimension(145, 132));
        B6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B6ActionPerformed(evt);
            }
        });
        jPanel1.add(B6, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 50, -1, 130));

        B3.setBackground(new java.awt.Color(255, 255, 255));
        B3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        B3.setForeground(new java.awt.Color(102, 0, 51));
        B3.setText("JButton1");
        B3.setMaximumSize(new java.awt.Dimension(145, 132));
        B3.setMinimumSize(new java.awt.Dimension(145, 132));
        B3.setPreferredSize(new java.awt.Dimension(145, 132));
        B3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B3ActionPerformed(evt);
            }
        });
        jPanel1.add(B3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 350, -1, 130));

        B4.setBackground(new java.awt.Color(255, 255, 255));
        B4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        B4.setForeground(new java.awt.Color(102, 0, 51));
        B4.setText("JButton1");
        B4.setPreferredSize(new java.awt.Dimension(145, 132));
        B4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B4ActionPerformed(evt);
            }
        });
        jPanel1.add(B4, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 350, -1, 130));

        B1.setBackground(new java.awt.Color(255, 255, 255));
        B1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        B1.setForeground(new java.awt.Color(102, 0, 51));
        B1.setText("JButton1");
        B1.setMaximumSize(new java.awt.Dimension(145, 132));
        B1.setMinimumSize(new java.awt.Dimension(145, 132));
        B1.setPreferredSize(new java.awt.Dimension(145, 132));
        B1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B1ActionPerformed(evt);
            }
        });
        jPanel1.add(B1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 54, -1, 130));

        B2.setBackground(new java.awt.Color(255, 255, 255));
        B2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        B2.setForeground(new java.awt.Color(102, 0, 51));
        B2.setText("JButton1");
        B2.setMaximumSize(new java.awt.Dimension(145, 132));
        B2.setMinimumSize(new java.awt.Dimension(145, 132));
        B2.setPreferredSize(new java.awt.Dimension(145, 132));
        B2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B2ActionPerformed(evt);
            }
        });
        jPanel1.add(B2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 202, -1, 130));

        waiterName.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        waiterName.setForeground(new java.awt.Color(255, 255, 255));
        waiterName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        waiterName.setText("Hello "+waiter.getName());
        jPanel1.add(waiterName, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, -1, -1));

        B5.setBackground(new java.awt.Color(255, 255, 255));
        B5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        B5.setForeground(new java.awt.Color(102, 0, 51));
        B5.setText("JButton1");
        B5.setMaximumSize(new java.awt.Dimension(145, 132));
        B5.setMinimumSize(new java.awt.Dimension(145, 132));
        B5.setPreferredSize(new java.awt.Dimension(145, 132));
        B5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B5ActionPerformed(evt);
            }
        });
        jPanel1.add(B5, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 200, -1, 130));

        B7.setBackground(new java.awt.Color(255, 255, 255));
        B7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        B7.setForeground(new java.awt.Color(102, 0, 51));
        B7.setMaximumSize(new java.awt.Dimension(145, 132));
        B7.setMinimumSize(new java.awt.Dimension(145, 132));
        B7.setPreferredSize(new java.awt.Dimension(145, 132));
        B7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B7ActionPerformed(evt);
            }
        });
        jPanel1.add(B7, new org.netbeans.lib.awtextra.AbsoluteConstraints(262, 202, -1, 130));

        Back.setBackground(new java.awt.Color(255, 255, 255));
        Back.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Back.setForeground(new java.awt.Color(102, 0, 51));
        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });
        jPanel1.add(Back, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void B1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B1ActionPerformed
         table=tableButtonMap.get(B1);       
        try{
        tableNumLabel.setText(String.valueOf(table.getTableNum()));
        reservedToLabel.setText(table.getOrder().getCustomerName());
        table.getOrder().getDishes().forEach((dish) -> {
            orderListModel.addElement(dish.getDishName()+"   "+dish.getDishPrice());
            });
        tableDetails.setVisible(true);
        table.getOrder().setOrderPrice(0);
        table.getOrder().setPriceWithoutTax(0);
        table.getOrder().calcOrderPrice();
        table.getOrder().calcTotalOrderPrice(); 
        if(!table.getOrder().isCooked())
            serve.setVisible(false);
        orderListModel.addElement(" Order Price:   "+ table.getOrder().getPriceWithoutTax());
        orderListModel.addElement("Total Order Price:   "+ table.getOrder().getOrderPrice());
        this.setVisible(false);
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Table "+String.valueOf(table.getTableNum()+ " is Unreserved"));
        }
        
        
    }//GEN-LAST:event_B1ActionPerformed

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        this.setVisible(true);
        orderListModel.clear();
        tableDetails.dispose();
    }//GEN-LAST:event_okActionPerformed

    private void B2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B2ActionPerformed
         table=tableButtonMap.get(B2);       
        try{
        tableNumLabel.setText(String.valueOf(table.getTableNum()));
        reservedToLabel.setText(table.getOrder().getCustomerName());
        table.getOrder().getDishes().forEach((dish) -> {
            orderListModel.addElement(dish.getDishName()+"   "+dish.getDishPrice());
            });
        tableDetails.setVisible(true);
        table.getOrder().setOrderPrice(0);
        table.getOrder().setPriceWithoutTax(0);
        table.getOrder().calcOrderPrice();
        table.getOrder().calcTotalOrderPrice();    
        if(!table.getOrder().isCooked())
            serve.setVisible(false);
        orderListModel.addElement(" Order Price:   "+ table.getOrder().getPriceWithoutTax());
        orderListModel.addElement("Total Order Price:   "+ table.getOrder().getOrderPrice());
        this.setVisible(false);
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Table "+String.valueOf(table.getTableNum()+ " is Unreserved"));
        }
    }//GEN-LAST:event_B2ActionPerformed

    private void B3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B3ActionPerformed
        table=tableButtonMap.get(B3);       
        try{
        tableNumLabel.setText(String.valueOf(table.getTableNum()));
        reservedToLabel.setText(table.getOrder().getCustomerName());
        table.getOrder().getDishes().forEach((dish) -> {
            orderListModel.addElement(dish.getDishName()+"   "+dish.getDishPrice());
            });
        tableDetails.setVisible(true);
        table.getOrder().setOrderPrice(0);
        table.getOrder().setPriceWithoutTax(0);
        table.getOrder().calcOrderPrice();
        table.getOrder().calcTotalOrderPrice();      
        if(!table.getOrder().isCooked())
            serve.setVisible(false);
        orderListModel.addElement(" Order Price:   "+ table.getOrder().getPriceWithoutTax());
        orderListModel.addElement("Total Order Price:   "+ table.getOrder().getOrderPrice());
        this.setVisible(false);
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Table "+String.valueOf(table.getTableNum()+ " is Unreserved"));
        }
    }//GEN-LAST:event_B3ActionPerformed

    private void B4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B4ActionPerformed
         table=tableButtonMap.get(B4);       
        try{
        tableNumLabel.setText(String.valueOf(table.getTableNum()));
        reservedToLabel.setText(table.getOrder().getCustomerName());
        table.getOrder().getDishes().forEach((dish) -> {
            orderListModel.addElement(dish.getDishName()+"   "+dish.getDishPrice());
            });
        tableDetails.setVisible(true);
        table.getOrder().setOrderPrice(0);
        table.getOrder().setPriceWithoutTax(0);
        table.getOrder().calcOrderPrice();
        table.getOrder().calcTotalOrderPrice();      
        if(!table.getOrder().isCooked())
            serve.setVisible(false);
        orderListModel.addElement(" Order Price:   "+ table.getOrder().getPriceWithoutTax());
        orderListModel.addElement("Total Order Price:   "+ table.getOrder().getOrderPrice());
        this.setVisible(false);
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Table "+String.valueOf(table.getTableNum()+ " is Unreserved"));
        }
    }//GEN-LAST:event_B4ActionPerformed

    private void B7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B7ActionPerformed
         table=tableButtonMap.get(B7);       
        try{
        tableNumLabel.setText(String.valueOf(table.getTableNum()));
        reservedToLabel.setText(table.getOrder().getCustomerName());
        table.getOrder().getDishes().forEach((dish) -> {
            orderListModel.addElement(dish.getDishName()+"   "+dish.getDishPrice());
            });
        tableDetails.setVisible(true);
        table.getOrder().setOrderPrice(0);
        table.getOrder().setPriceWithoutTax(0);
        table.getOrder().calcOrderPrice();
        table.getOrder().calcTotalOrderPrice();    
        if(!table.getOrder().isCooked())
            serve.setVisible(false);
        orderListModel.addElement(" Order Price:   "+ table.getOrder().getPriceWithoutTax());
        orderListModel.addElement("Total Order Price:   "+ table.getOrder().getOrderPrice());
        this.setVisible(false);
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Table "+String.valueOf(table.getTableNum()+ " is Unreserved"));
        }
    }//GEN-LAST:event_B7ActionPerformed

    private void B6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B6ActionPerformed
         table=tableButtonMap.get(B6);       
        try{
        tableNumLabel.setText(String.valueOf(table.getTableNum()));
        reservedToLabel.setText(table.getOrder().getCustomerName());
        table.getOrder().getDishes().forEach((dish) -> {
            orderListModel.addElement(dish.getDishName()+"   "+dish.getDishPrice());
            });
        tableDetails.setVisible(true);
        table.getOrder().setOrderPrice(0);
        table.getOrder().setPriceWithoutTax(0);
        table.getOrder().calcOrderPrice();
        table.getOrder().calcTotalOrderPrice();      
        if(!table.getOrder().isCooked())
            serve.setVisible(false);
        orderListModel.addElement(" Order Price:   "+ table.getOrder().getPriceWithoutTax());
        orderListModel.addElement("Total Order Price:   "+ table.getOrder().getOrderPrice());
        this.setVisible(false);
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Table "+String.valueOf(table.getTableNum()+ " is Unreserved"));
        }
    }//GEN-LAST:event_B6ActionPerformed

    private void B5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B5ActionPerformed
         table=tableButtonMap.get(B5);       
        try{
        tableNumLabel.setText(String.valueOf(table.getTableNum()));
        reservedToLabel.setText(table.getOrder().getCustomerName());
        table.getOrder().getDishes().forEach((dish) -> {
            orderListModel.addElement(dish.getDishName()+"   "+dish.getDishPrice());
            });
        tableDetails.setVisible(true);
        table.getOrder().setOrderPrice(0);
        table.getOrder().setPriceWithoutTax(0);
        table.getOrder().calcOrderPrice();
        table.getOrder().calcTotalOrderPrice();      
        if(!table.getOrder().isCooked())
            serve.setVisible(false);
        orderListModel.addElement(" Order Price:   "+ table.getOrder().getPriceWithoutTax());
        orderListModel.addElement("Total Order Price:   "+ table.getOrder().getOrderPrice());
        this.setVisible(false);
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Table "+String.valueOf(table.getTableNum()+ " is Unreserved"));
        }
    }//GEN-LAST:event_B5ActionPerformed

    private void serveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serveActionPerformed
        tableButtonMap.clear();
        this.setVisible(true);
        orderListModel.clear();
        table.setOrder(null);
        table.setAvailable(true);
        orderlist.removeIf((toremove)-> toremove.getTableNum()==this.table.getTableNum());
        orders.setOrders(orderlist);
        tablelist.removeIf((toremove)->toremove.getTableNum()==this.table.getTableNum());
        tablelist.add(table);
        tables.setTables(tablelist);
        DATA.setOrders(orders);
        DATA.setTables(tables);
            try {
                DATA.writeData(Boot.jarParent);
            } catch (Exception ex) {
                Logger.getLogger(WaiterDashBoard.class.getName()).log(Level.SEVERE, null, ex);
            }
        tableDetails.dispose();
    }//GEN-LAST:event_serveActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        JFrame loginPage = new Start(DATA);
        this.dispose();
        loginPage.setVisible(true);
    }//GEN-LAST:event_BackActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
         for(int i =0;i< 7;i++ ){
            tableButtonMap.put(buttonList.get(i), DATA.getTables().getTables().get(i));
        }

        tableButtonMap.entrySet().forEach((entry) -> {
            String tableNum=String.valueOf(entry.getValue().getTableNum());
            String tableOrder;
            try{
                tableOrder=entry.getValue().getOrder().getCustomerName();
            }catch (Exception ex) {
                tableOrder="Unreserved";
            }
            entry.getKey().setText("<html><center>"+"Table "+tableNum+"<br>"+tableOrder+"</html");
            });
          
    }//GEN-LAST:event_formWindowGainedFocus

    private void tableDetailsWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_tableDetailsWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableDetailsWindowClosed

    private void tableDetailsWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_tableDetailsWindowClosing
        // TODO add your handling code here:
        orderListModel.clear();
        tableDetails.dispose();
        this.setVisible(true);
    }//GEN-LAST:event_tableDetailsWindowClosing

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton B1;
    private JButton B2;
    private JButton B3;
    private JButton B4;
    private JButton B5;
    private JButton B6;
    private JButton B7;
    private JButton Back;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private JButton ok;
    private javax.swing.JList<String> orderList;
    private javax.swing.JLabel reservedToLabel;
    private JButton serve;
    private javax.swing.JDialog tableDetails;
    private javax.swing.JLabel tableNumLabel;
    private javax.swing.JLabel waiterName;
    // End of variables declaration//GEN-END:variables
}
